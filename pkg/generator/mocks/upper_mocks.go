// Code generated by MockGen. DO NOT EDIT.
// Source: .\pkg\generator\interface.go

// Package mock_generator is a generated GoMock package.
package mock_generator

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mykytaserdiuk9/httpmock/pkg/models"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockServer) Run(handler http.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockServerMockRecorder) Run(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockServer)(nil).Run), handler)
}

// MockLauncher is a mock of Launcher interface.
type MockLauncher struct {
	ctrl     *gomock.Controller
	recorder *MockLauncherMockRecorder
}

// MockLauncherMockRecorder is the mock recorder for MockLauncher.
type MockLauncherMockRecorder struct {
	mock *MockLauncher
}

// NewMockLauncher creates a new mock instance.
func NewMockLauncher(ctrl *gomock.Controller) *MockLauncher {
	mock := &MockLauncher{ctrl: ctrl}
	mock.recorder = &MockLauncherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLauncher) EXPECT() *MockLauncherMockRecorder {
	return m.recorder
}

// Launch mocks base method.
func (m *MockLauncher) Launch(scheme *models.MockScheme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Launch", scheme)
	ret0, _ := ret[0].(error)
	return ret0
}

// Launch indicates an expected call of Launch.
func (mr *MockLauncherMockRecorder) Launch(scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Launch", reflect.TypeOf((*MockLauncher)(nil).Launch), scheme)
}
